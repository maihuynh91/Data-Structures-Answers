Question 1: What is a hash table?
	Hash table is a data structure that is used to store keys/value pairs.

Question 2: What is hashing?
	Hashing is a process that converts arbitrary data into fixed-length hash code using hash function. 

Question 3: How does a hash table store data?
	- Taking key (key can be any types of data, but strings are most common).
	- Since array can only be indexed by numbers, we need to convert key to hash code by using Hashing Function.
	- Modding Hash Code to get Array index.
	- Store value in Array Index.

Question 4: How are hash tables and objects different?
	Object is entity that has properties and value.
	Hash Table takes a key and converts it to index to store key-value pairs.

Question 5: Determine whether you would use a hash table or an object to store each of the following pieces of data:
	A list of pets and their unique names: Hash Table
	The name, age, and the birthday of your best friend: Object
	The name and location of every company in a given city: Hash Table
	All of the books checked out from a library by a particular individual: Hash Table
	The primary and secondary phone numbers for a contact: Object

{Question 6: Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and
look up customers using their phone numbers. Store this information in a hash table.}

    function hash(key, tableSize) {
      var hash = 0;
      for(var i = 0; i < key.length; i++){
        hash += key.charCodeAt(i);
      }
      return hash % tableSize;  
    };
      
      function hashTable (){
        var storage = [];
        var tableSize = 100;
        
        this.printTb = function(){
            console.log(storage)
        }
        
        this.set = function(phone, name, customerAddress){
          var index = hash(phone, tableSize);
      
          if (storage[index] === undefined) {
            storage[index] = [ [phone, name, customerAddress] ];
          }
      };
        
        this.get = function(phone){
          var index = hash(phone, tableSize);
      
          if(storage[index] === undefined){
            return "***Empty List***";
          } else {
            for(var i = 0; i < storage[index].length; i++) {
              if(storage[index][i][0] === phone) {
                return `Phone: ${storage[index][i][0]} |Name: ${storage[index][i][1]} |Add: ${storage[index][i][2]}`;
              } else {
                return "***Customer does not exist***";
              }
            }
          }
        };
      }

      let ht= new hashTable();

      ht.set("123-456-789", "Emma", "123 Street");
      ht.set("012-222-445", "Alex", "9999 Olathe, Kansas State");
      ht.set("134-554-5555", "Daniel", "321 LA");
    console.log(ht.get("123-456-789"));
    console.log(ht.get("012-222-445"));
    console.log(ht.get("134-5545"));
    //  ht.printTb();


Question 7: Build a system that allows a store owner to track their store's inventory using a hash table for storage.


	function hash(key, tableSize){
		let hash = 0;
		for(let i = 0; i < key.length; i++){
			hash += key.charCodeAt(i);
		}
		return hash % tableSize;
	}

	function hashTable(){
		let storage = [];
		let tableSize = 100;

		this.set = function(item, quantity){
			let index = hash(item, tableSize);

			if(storage[index] === undefined){
				storage[index] = [ [item, quantity] ];
			}
		};

		this.get = function(item){
			let index = hash(item, tableSize);
			let id = storage[index];

			if(id === undefined){
				return "*** Item is not found ***";
			} else {
				for(var i = 0; i < id.length; i++) {
				if(id[i][0] === item) {
						return `There are ${id[i][1]} ${id[i][0]} in stock. `
				} 
					}
				} 
			};
			}

	let inventory = new hashTable();
	inventory.set("Veggies", "100");
	inventory.set("Coke", "200");
	inventory.set("Beer", "10");

	console.log(inventory.get("Veggies"));
	console.log(inventory.get("Coke"));
	console.log(inventory.get("Beef"));

Question 8: Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date.
Use hash tables to store the necessary data.

    function hash(key, size){
      let hash = 0;
      for(let i = 0; i < key.length; i++){
        hash += key.charCodeAt(i);
      }
      return hash % size;
      }

    function dataHashTable(){
      let storage = [];
      let tableSize = 100;

      this.set = function(publisher, date, article){
        let index = hash(date, tableSize);
        if(storage[index] === undefined){
          storage[index] = [ [publisher, date, article] ];
        }
      };

      this.get = function(date){
        let index = hash(date, tableSize);

        if(storage[index] === undefined) {
            return "Newspapers list is empty";}
        else {
            for(let i = 0; i < storage[index].length; i++) {
              if(storage[index][i][1] === date) {
                  return `Publisher ${storage[index][i][0]}  date published: ${storage[index][i][1]} article ${storage[index][i][2]}`;
              } 
              else {
                return "Not Found";}
                }
              };
                                };
            }

    function publisherHashTable(){
      let storage = [];
      let tableSize = 100;

      this.set = function(publisher, date, article){
        let index = hash(publisher, tableSize);

        if(storage[index] === undefined){
          storage[index] = [ [publisher, date, article] ];
                                        }
                  };

      this.get = function(publisher){
        let index = hash(publisher, tableSize);
        
        if(storage[index] === undefined) {
            return "The publisher list is empty";} 
        else {
          for(let i = 0; i < storage[index].length; i++) {
            if(storage[index][i][0] === publisher) {
              return `Publisher ${storage[index][i][0]} date published: ${storage[index][i][1]} article: ${storage[index][i][2]}`}
            else {
              return "Not Found";
              }
            };
              }
      };
    }


    let newspaper = new publisherHashTable();
    let newspaperDate = new dataHashTable();

    newspaper.set("AAAA", "12.Dec", "aaaaaaaaaaaaaaaaaaa");
    newspaper.set("BBBBBBBBBB", "2018", "bbbbbbbbbbb");

    newspaperDate.set("AAAA", "12.Dec", "aaaaaaaaaaaaaaaaaaa");
    newspaperDate.set("BBBBBBBBBB", "2018", "bbbbbbbbbbb");
    newspaperDate.set("CCCC", "12.Dec", "aaaaaaaaaaaaaaaaaaa");


    console.log(newspaper.get("AAAA"));
    console.log(newspaperDate.get("2018"));
    console.log(newspaperDate.get("2019"));






	