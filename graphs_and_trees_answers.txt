Question 1: What is a binary tree and what makes it unique to other trees?
	Binary tree is a tree in which each node can have at most two children( a left child and a right child).
	In a binary tree, left node is less than the root node, and right node is greater than the root node. 


Question 2:What is a heuristic?
	Heuristic is an approach that developers make the guesses to solve the complex problem sooner by sacrificing accuracy. 


Question 3: What is another problem besides the shortest-path problem that requires the use of heuristics?
	Virus scanning: heuristic scanning scans for code or behavioral patterns common to a class of viruses. If the file is found to contain 
matching code patterns, then the scanner concludes that the file is infected. 


Question 4: What is the difference between a depth-first search and a breadth-first search?
	Depth-first search (DFS) starts at the root and explores as far as possible along each branch before backtracking. Stack is used in
implementation of the DFS. 
	Breadth-first search (BFS) starts at tree root and explores entire row of nodes before proceeding to the next. BFS visits node level by
level. Queue is used in implementation of the BFS.


Question 5: Explain in your own words what an undirected, a-cyclic, unweighted graph is.
	Undirected graphs: their edges don't have a direction. Each edge can be traversed in both directions.
	A-cyclic graph is graph with no repeated vertices. When we go from node to node, we never visit the same node twice. 
	Unweighted graph is graph in which an edge does not have any cost associated with it.


Question 6: What kind of graph is a binary search tree?
	Undirected graph.

Programming Questions

Question 1: Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

	function Node(data){
    this.value = data;
    this.left = null;
    this.right = null;
}

class BinaryTree{
    constructor(){
        this.root = null;
    }

    insertValue(data){
        let root = this.root;
        if(root ===null){
            this.root = new Node(data);
            return;
        }

        let currentNode = root;
        let newNode = new Node(data);

        while(currentNode){
            if(data <currentNode.value){
                if(currentNode.left===null){
                    currentNode.left = newNode;
                    break;
                }else{
                    currentNode = currentNode.left;
                }
            }
            else{
                if(currentNode.right ===null){
                    currentNode.right = newNode;
                    break;
                }else{
                    currentNode = currentNode.right;
                }
            }
        };
    };

    searchValue(item){
        let temp = this.root;   
        while(temp){
            if(item === temp.value){
                return `${item} exists`;
            }
            else if(item<temp.value){
                 temp = temp.left;
             
            }else if( item>temp.value){
                 temp = temp.right
            };
        }
        return `${item} does not exist.`;
    }
}





Question 2: Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.

	    function Node(data){
                this.value = data;
                this.left = null;
                this.right = null;
            }

            class BinaryTree{
                constructor(){
                    this.root = null;
                }

                insertValue(data){
                    let root = this.root;
                    if(root ===null){
                        this.root = new Node(data);
                        return;
                    }

                    let currentNode = root;
                    let newNode = new Node(data);

                    while(currentNode){
                        if(data <currentNode.value){
                            if(currentNode.left===null){
                                currentNode.left = newNode;
                                break;
                            }else{
                                currentNode = currentNode.left;
                            }
                        }
                        else{
                            if(currentNode.right ===null){
                                currentNode.right = newNode;
                                break;
                            }else{
                                currentNode = currentNode.right;
                            }
                        }
                    };
                };

                searchValue(item){
                    let temp = this.root;   
                    while(temp){
                        if(item === temp.value){
                            return `${item} exists`;
                        }
                        else if(item<temp.value){
                            temp = temp.left;
                        
                        }else if( item>temp.value){
                            temp = temp.right
                        };
                    }
                    return `${item} does not exist.`;
                }

                Lca(node,n1,n2){
                    //let root=this.root
                    if(node ===null) return null;
                    if(node.value===n1 || node.value===n2) return node;
                    let left = this.Lca(node.left, n1,n2);
                    let right = this.Lca(node.right, n1, n2);
                    if(left !== null && right !==null) return node;
                    if (left===null && right===null) return null;
                    return left !== null ? left : right;
                }
                pathLength(node,value){
                    let len = 0;
                    if(node === null || node.value === null){
                        return 0;
                    }
                    else if(node.value === value){
                    return 1;
                    }
                    else if( (len = this.pathLength(node.left,value))>0 || (len = this.pathLength(node.right,value))>0){
                        return len + 1;
                    }
                    return 0;  
                }

                FindDistance(root,n1,n2){
                    let x = this.pathLength(root, n1) - 1;
                    let y = this.pathLength(root,n2) - 1;
                    let lcaData = this.Lca(root, n1, n2).value;
                    let lcaDistance = this.pathLength(root, lcaData) - 1;
                    return (x+y) -2*lcaDistance;
                }
                    
                
            }  

            let bt = new BinaryTree();
            bt.insertValue(9); bt.insertValue(19);bt.insertValue(29);bt.insertValue(2);bt.insertValue(7);
            bt.insertValue(1)
            console.log(bt.FindDistance(bt.root, 29,2))
            //console.log(bt.pathLength(bt.root,2));



